{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMVhCZKcA5HJMGxEIPkleLr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ekawaka/MACHINE-LEARNING-1/blob/main/Week%203%20-%20Classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Importation of"
      ],
      "metadata": {
        "id": "hr41m_OcVqV7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt #Visualization\n",
        "import seaborn as sns #Advanced Visualization\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "CAMogpXuVl_d"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Loading data\n",
        "Loan = pd.read_csv(\"raw-data.csv\")\n",
        "Loan.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "id": "5WIo1xlFWExd",
        "outputId": "fdf336cb-b261-438e-f195-8f7f54727ea8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-9f299e431362>:2: DtypeWarning: Columns (9,12,13,14,15) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  Loan = pd.read_csv(\"raw-data.csv\")\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   V1  V2  V3    V4   V5      V6       V7    V8      V9 V10  ...  V23  \\\n",
              "0   1   0   0  24.0  0.0  2432.0  46500.0  24.0  1385.0  SC  ...  NaN   \n",
              "1   2   0   1  24.0  1.0  1495.0  28168.0  24.0  2496.0  MO  ...  NaN   \n",
              "2   3   0   0  26.0  0.0  1707.0  38900.0  30.0  1346.0  SC  ...  NaN   \n",
              "3   4   0   0  24.0  0.0  2128.0  42900.0  24.0  1375.0  SC  ...  NaN   \n",
              "4   5   0   0  27.0  0.0  1824.0  40900.0  30.0  4140.0  MC  ...  NaN   \n",
              "\n",
              "        V24      V25   V26   V27 V28  V29  V30     V31  V32  \n",
              "0       NaN  46500.0   NaN   NaN   0    0    0  TIER 1    0  \n",
              "1       NaN  28168.0   NaN   NaN   0    0    0  TIER 1    0  \n",
              "2  105000.0  38900.0  34.0  31.0  31   31   16  TIER 1    0  \n",
              "3       NaN  42900.0   NaN   NaN   0    0    0  TIER 1    0  \n",
              "4       NaN  40900.0   NaN   NaN   0    0    0  TIER 1    0  \n",
              "\n",
              "[5 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4e2451f-5928-4c74-8e71-4849aa8bf50b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>V10</th>\n",
              "      <th>...</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>V29</th>\n",
              "      <th>V30</th>\n",
              "      <th>V31</th>\n",
              "      <th>V32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2432.0</td>\n",
              "      <td>46500.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1385.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>46500.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1495.0</td>\n",
              "      <td>28168.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>2496.0</td>\n",
              "      <td>MO</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28168.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1707.0</td>\n",
              "      <td>38900.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1346.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105000.0</td>\n",
              "      <td>38900.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>31</td>\n",
              "      <td>31</td>\n",
              "      <td>16</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2128.0</td>\n",
              "      <td>42900.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1375.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>42900.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1824.0</td>\n",
              "      <td>40900.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>4140.0</td>\n",
              "      <td>MC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40900.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 32 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4e2451f-5928-4c74-8e71-4849aa8bf50b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d4e2451f-5928-4c74-8e71-4849aa8bf50b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d4e2451f-5928-4c74-8e71-4849aa8bf50b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-062b3d6a-e3c6-4c5b-96ad-df776a9779f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-062b3d6a-e3c6-4c5b-96ad-df776a9779f7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-062b3d6a-e3c6-4c5b-96ad-df776a9779f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Loan"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Renaming columns in the dataset with their correct names\n",
        "Loan_renamed = Loan.rename(columns={'V1': 'Customer ID',\n",
        "'V2': 'Customer has bounced in first EMI',\n",
        "'V3': 'No of times bounced 12 months',\n",
        "'V4': 'Maximum MOB',\n",
        "'V5': 'No of times bounced while repaying the loan',\n",
        "'V6': 'EMI',\n",
        "'V7': 'Loan Amount',\n",
        "'V8': 'Tenure',\n",
        "'V9': 'Dealer codes from where customer has purchased the Two wheeler',\n",
        "'V10': 'Product code of Two wheeler',\n",
        "'V11': 'No of advance EMI paid',\n",
        "'V12': 'Rate of interest',\n",
        "'V13': 'Gender',\n",
        "'V14': 'Employment type',\n",
        "'V15': 'Resident type of customer',\n",
        "'V16': 'Date of birth',\n",
        "'V17': 'Customer age when loanwas taken',\n",
        "'V18': 'No of loans',\n",
        "'V19': 'No of secured loans',\n",
        "'V20': 'No of unsecured loans',\n",
        "'V21': 'Max amount sanctioned in the Live loans',\n",
        "'V22': 'No of new loans in last 3 months',\n",
        "'V23': 'Total sanctioned amount in the secured Loans which are Live',\n",
        "'V24': 'Total sanctioned amount in the unsecured Loans which are Live',\n",
        "'V25': 'Maximum amount sanctioned for any Two wheeler loan',\n",
        "'V26': 'Time since last Personal loan taken (in months)',\n",
        "'V27': 'Time since first consumer durables loan taken (in months)',\n",
        "'V28': 'No of times 30 days past due in last 6 months',\n",
        "'V29': 'No of times 60 days past due in last 6 months',\n",
        "'V30': 'No of times 90 days past due in last 3 months',\n",
        "'V31': 'Tier',\n",
        "'V32': 'Target variable'})\n",
        "Loan_renamed.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "gn_W1N-tWQ6V",
        "outputId": "dc587db2-188f-4c51-aa17-1011db498a50"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Customer ID  Customer has bounced in first EMI  \\\n",
              "0            1                                  0   \n",
              "1            2                                  0   \n",
              "2            3                                  0   \n",
              "3            4                                  0   \n",
              "4            5                                  0   \n",
              "\n",
              "   No of times bounced 12 months  Maximum MOB  \\\n",
              "0                              0         24.0   \n",
              "1                              1         24.0   \n",
              "2                              0         26.0   \n",
              "3                              0         24.0   \n",
              "4                              0         27.0   \n",
              "\n",
              "   No of times bounced while repaying the loan     EMI  Loan Amount  Tenure  \\\n",
              "0                                          0.0  2432.0      46500.0    24.0   \n",
              "1                                          1.0  1495.0      28168.0    24.0   \n",
              "2                                          0.0  1707.0      38900.0    30.0   \n",
              "3                                          0.0  2128.0      42900.0    24.0   \n",
              "4                                          0.0  1824.0      40900.0    30.0   \n",
              "\n",
              "   Dealer codes from where customer has purchased the Two wheeler  \\\n",
              "0                                             1385.0                \n",
              "1                                             2496.0                \n",
              "2                                             1346.0                \n",
              "3                                             1375.0                \n",
              "4                                             4140.0                \n",
              "\n",
              "  Product code of Two wheeler  ...  \\\n",
              "0                          SC  ...   \n",
              "1                          MO  ...   \n",
              "2                          SC  ...   \n",
              "3                          SC  ...   \n",
              "4                          MC  ...   \n",
              "\n",
              "   Total sanctioned amount in the secured Loans which are Live  \\\n",
              "0                                                NaN             \n",
              "1                                                NaN             \n",
              "2                                                NaN             \n",
              "3                                                NaN             \n",
              "4                                                NaN             \n",
              "\n",
              "   Total sanctioned amount in the unsecured Loans which are Live  \\\n",
              "0                                                NaN               \n",
              "1                                                NaN               \n",
              "2                                           105000.0               \n",
              "3                                                NaN               \n",
              "4                                                NaN               \n",
              "\n",
              "  Maximum amount sanctioned for any Two wheeler loan  \\\n",
              "0                                            46500.0   \n",
              "1                                            28168.0   \n",
              "2                                            38900.0   \n",
              "3                                            42900.0   \n",
              "4                                            40900.0   \n",
              "\n",
              "  Time since last Personal loan taken (in months)  \\\n",
              "0                                             NaN   \n",
              "1                                             NaN   \n",
              "2                                            34.0   \n",
              "3                                             NaN   \n",
              "4                                             NaN   \n",
              "\n",
              "  Time since first consumer durables loan taken (in months)  \\\n",
              "0                                                NaN          \n",
              "1                                                NaN          \n",
              "2                                               31.0          \n",
              "3                                                NaN          \n",
              "4                                                NaN          \n",
              "\n",
              "  No of times 30 days past due in last 6 months  \\\n",
              "0                                             0   \n",
              "1                                             0   \n",
              "2                                            31   \n",
              "3                                             0   \n",
              "4                                             0   \n",
              "\n",
              "   No of times 60 days past due in last 6 months  \\\n",
              "0                                              0   \n",
              "1                                              0   \n",
              "2                                             31   \n",
              "3                                              0   \n",
              "4                                              0   \n",
              "\n",
              "   No of times 90 days past due in last 3 months    Tier  Target variable  \n",
              "0                                              0  TIER 1                0  \n",
              "1                                              0  TIER 1                0  \n",
              "2                                             16  TIER 1                0  \n",
              "3                                              0  TIER 1                0  \n",
              "4                                              0  TIER 1                0  \n",
              "\n",
              "[5 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-489027e6-4a7a-4b03-81bd-cfe460f41b54\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Customer has bounced in first EMI</th>\n",
              "      <th>No of times bounced 12 months</th>\n",
              "      <th>Maximum MOB</th>\n",
              "      <th>No of times bounced while repaying the loan</th>\n",
              "      <th>EMI</th>\n",
              "      <th>Loan Amount</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Dealer codes from where customer has purchased the Two wheeler</th>\n",
              "      <th>Product code of Two wheeler</th>\n",
              "      <th>...</th>\n",
              "      <th>Total sanctioned amount in the secured Loans which are Live</th>\n",
              "      <th>Total sanctioned amount in the unsecured Loans which are Live</th>\n",
              "      <th>Maximum amount sanctioned for any Two wheeler loan</th>\n",
              "      <th>Time since last Personal loan taken (in months)</th>\n",
              "      <th>Time since first consumer durables loan taken (in months)</th>\n",
              "      <th>No of times 30 days past due in last 6 months</th>\n",
              "      <th>No of times 60 days past due in last 6 months</th>\n",
              "      <th>No of times 90 days past due in last 3 months</th>\n",
              "      <th>Tier</th>\n",
              "      <th>Target variable</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2432.0</td>\n",
              "      <td>46500.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1385.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>46500.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1495.0</td>\n",
              "      <td>28168.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>2496.0</td>\n",
              "      <td>MO</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28168.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1707.0</td>\n",
              "      <td>38900.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1346.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105000.0</td>\n",
              "      <td>38900.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>31</td>\n",
              "      <td>31</td>\n",
              "      <td>16</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2128.0</td>\n",
              "      <td>42900.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1375.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>42900.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1824.0</td>\n",
              "      <td>40900.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>4140.0</td>\n",
              "      <td>MC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40900.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 32 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-489027e6-4a7a-4b03-81bd-cfe460f41b54')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-489027e6-4a7a-4b03-81bd-cfe460f41b54 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-489027e6-4a7a-4b03-81bd-cfe460f41b54');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7bb25692-046a-4f29-9dd9-64d9ae1468a4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7bb25692-046a-4f29-9dd9-64d9ae1468a4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7bb25692-046a-4f29-9dd9-64d9ae1468a4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Loan_renamed"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. EDA"
      ],
      "metadata": {
        "id": "W5JSA-FPWhB9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_renamed.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BJMaq2AkWbUN",
        "outputId": "f395bf28-7daa-4c31-ef5c-0c5bfe602c61"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 119528 entries, 0 to 119527\n",
            "Data columns (total 32 columns):\n",
            " #   Column                                                          Non-Null Count   Dtype  \n",
            "---  ------                                                          --------------   -----  \n",
            " 0   Customer ID                                                     119528 non-null  int64  \n",
            " 1   Customer has bounced in first EMI                               119528 non-null  int64  \n",
            " 2   No of times bounced 12 months                                   119528 non-null  int64  \n",
            " 3   Maximum MOB                                                     85048 non-null   float64\n",
            " 4   No of times bounced while repaying the loan                     85048 non-null   float64\n",
            " 5   EMI                                                             85048 non-null   float64\n",
            " 6   Loan Amount                                                     85048 non-null   float64\n",
            " 7   Tenure                                                          85048 non-null   float64\n",
            " 8   Dealer codes from where customer has purchased the Two wheeler  85048 non-null   float64\n",
            " 9   Product code of Two wheeler                                     85048 non-null   object \n",
            " 10  No of advance EMI paid                                          85048 non-null   float64\n",
            " 11  Rate of interest                                                85048 non-null   float64\n",
            " 12  Gender                                                          85048 non-null   object \n",
            " 13  Employment type                                                 85048 non-null   object \n",
            " 14  Resident type of customer                                       84131 non-null   object \n",
            " 15  Date of birth                                                   85048 non-null   object \n",
            " 16  Customer age when loanwas taken                                 85048 non-null   float64\n",
            " 17  No of loans                                                     119528 non-null  int64  \n",
            " 18  No of secured loans                                             119528 non-null  int64  \n",
            " 19  No of unsecured loans                                           119528 non-null  int64  \n",
            " 20  Max amount sanctioned in the Live loans                         36626 non-null   float64\n",
            " 21  No of new loans in last 3 months                                119528 non-null  int64  \n",
            " 22  Total sanctioned amount in the secured Loans which are Live     19281 non-null   float64\n",
            " 23  Total sanctioned amount in the unsecured Loans which are Live   19028 non-null   float64\n",
            " 24  Maximum amount sanctioned for any Two wheeler loan              104467 non-null  float64\n",
            " 25  Time since last Personal loan taken (in months)                 13431 non-null   float64\n",
            " 26  Time since first consumer durables loan taken (in months)       20433 non-null   float64\n",
            " 27  No of times 30 days past due in last 6 months                   119528 non-null  int64  \n",
            " 28  No of times 60 days past due in last 6 months                   119528 non-null  int64  \n",
            " 29  No of times 90 days past due in last 3 months                   119528 non-null  int64  \n",
            " 30  Tier                                                            119528 non-null  object \n",
            " 31  Target variable                                                 119528 non-null  int64  \n",
            "dtypes: float64(15), int64(11), object(6)\n",
            "memory usage: 29.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As illustrated there are quite a number of features with missing values, we will speak to this in the subsequent sections"
      ],
      "metadata": {
        "id": "LEP2isEJWyYS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_renamed.tail(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "At6NDvs_WrKr",
        "outputId": "30d6d7f7-f01a-4692-e11d-80d165cfc624"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Customer ID  Customer has bounced in first EMI  \\\n",
              "85043        85044                                  0   \n",
              "85044        85045                                  0   \n",
              "85045        85046                                  0   \n",
              "85046        85047                                  0   \n",
              "85047        85048                                  0   \n",
              "\n",
              "       No of times bounced 12 months  Maximum MOB  \\\n",
              "85043                              0         14.0   \n",
              "85044                              0         10.0   \n",
              "85045                              0         10.0   \n",
              "85046                              0          8.0   \n",
              "85047                              0          8.0   \n",
              "\n",
              "       No of times bounced while repaying the loan     EMI  Loan Amount  \\\n",
              "85043                                          0.0  2941.0      47900.0   \n",
              "85044                                          0.0  2870.0      41000.0   \n",
              "85045                                          0.0  2720.0      28350.0   \n",
              "85046                                          0.0  3500.0      50000.0   \n",
              "85047                                          0.0  2750.0      27500.0   \n",
              "\n",
              "       Tenure  Dealer codes from where customer has purchased the Two wheeler  \\\n",
              "85043    18.0                                             1375.0                \n",
              "85044    15.0                                            20061.0                \n",
              "85045    12.0                                             3982.0                \n",
              "85046    15.0                                             1151.0                \n",
              "85047    10.0                                             1013.0                \n",
              "\n",
              "      Product code of Two wheeler  ...  \\\n",
              "85043                          SC  ...   \n",
              "85044                          MC  ...   \n",
              "85045                          MO  ...   \n",
              "85046                          SC  ...   \n",
              "85047                          MO  ...   \n",
              "\n",
              "       Total sanctioned amount in the secured Loans which are Live  \\\n",
              "85043                                                NaN             \n",
              "85044                                                NaN             \n",
              "85045                                                NaN             \n",
              "85046                                                NaN             \n",
              "85047                                                NaN             \n",
              "\n",
              "       Total sanctioned amount in the unsecured Loans which are Live  \\\n",
              "85043                                           160400.0               \n",
              "85044                                                NaN               \n",
              "85045                                            32000.0               \n",
              "85046                                                NaN               \n",
              "85047                                                NaN               \n",
              "\n",
              "      Maximum amount sanctioned for any Two wheeler loan  \\\n",
              "85043                                            47900.0   \n",
              "85044                                            41000.0   \n",
              "85045                                            28350.0   \n",
              "85046                                            50000.0   \n",
              "85047                                            27500.0   \n",
              "\n",
              "      Time since last Personal loan taken (in months)  \\\n",
              "85043                                            77.0   \n",
              "85044                                             NaN   \n",
              "85045                                             NaN   \n",
              "85046                                             NaN   \n",
              "85047                                             NaN   \n",
              "\n",
              "      Time since first consumer durables loan taken (in months)  \\\n",
              "85043                                                NaN          \n",
              "85044                                                NaN          \n",
              "85045                                                NaN          \n",
              "85046                                                NaN          \n",
              "85047                                                NaN          \n",
              "\n",
              "      No of times 30 days past due in last 6 months  \\\n",
              "85043                                             5   \n",
              "85044                                             0   \n",
              "85045                                             6   \n",
              "85046                                             0   \n",
              "85047                                             0   \n",
              "\n",
              "       No of times 60 days past due in last 6 months  \\\n",
              "85043                                              3   \n",
              "85044                                              0   \n",
              "85045                                              6   \n",
              "85046                                              0   \n",
              "85047                                              0   \n",
              "\n",
              "       No of times 90 days past due in last 3 months    Tier  Target variable  \n",
              "85043                                              0  TIER 1                0  \n",
              "85044                                              0  TIER 4                0  \n",
              "85045                                              3  TIER 2                0  \n",
              "85046                                              0  TIER 3                0  \n",
              "85047                                              0  TIER 4                0  \n",
              "\n",
              "[5 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46c9ba2e-7f10-4cb3-9e9e-73cccd415161\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Customer has bounced in first EMI</th>\n",
              "      <th>No of times bounced 12 months</th>\n",
              "      <th>Maximum MOB</th>\n",
              "      <th>No of times bounced while repaying the loan</th>\n",
              "      <th>EMI</th>\n",
              "      <th>Loan Amount</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Dealer codes from where customer has purchased the Two wheeler</th>\n",
              "      <th>Product code of Two wheeler</th>\n",
              "      <th>...</th>\n",
              "      <th>Total sanctioned amount in the secured Loans which are Live</th>\n",
              "      <th>Total sanctioned amount in the unsecured Loans which are Live</th>\n",
              "      <th>Maximum amount sanctioned for any Two wheeler loan</th>\n",
              "      <th>Time since last Personal loan taken (in months)</th>\n",
              "      <th>Time since first consumer durables loan taken (in months)</th>\n",
              "      <th>No of times 30 days past due in last 6 months</th>\n",
              "      <th>No of times 60 days past due in last 6 months</th>\n",
              "      <th>No of times 90 days past due in last 3 months</th>\n",
              "      <th>Tier</th>\n",
              "      <th>Target variable</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>85043</th>\n",
              "      <td>85044</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2941.0</td>\n",
              "      <td>47900.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1375.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>160400.0</td>\n",
              "      <td>47900.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85044</th>\n",
              "      <td>85045</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2870.0</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>20061.0</td>\n",
              "      <td>MC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85045</th>\n",
              "      <td>85046</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2720.0</td>\n",
              "      <td>28350.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3982.0</td>\n",
              "      <td>MO</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32000.0</td>\n",
              "      <td>28350.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>TIER 2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85046</th>\n",
              "      <td>85047</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3500.0</td>\n",
              "      <td>50000.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>1151.0</td>\n",
              "      <td>SC</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>50000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85047</th>\n",
              "      <td>85048</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2750.0</td>\n",
              "      <td>27500.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1013.0</td>\n",
              "      <td>MO</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>27500.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>TIER 4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 32 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46c9ba2e-7f10-4cb3-9e9e-73cccd415161')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46c9ba2e-7f10-4cb3-9e9e-73cccd415161 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46c9ba2e-7f10-4cb3-9e9e-73cccd415161');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-688bfe9a-54c7-41bb-a1ba-fd3fa2554fbc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-688bfe9a-54c7-41bb-a1ba-fd3fa2554fbc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-688bfe9a-54c7-41bb-a1ba-fd3fa2554fbc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Saving the same for an Excel exploration- usually much quicker\n",
        "# Loan_renamed.to_csv('credit_default_data.csv')"
      ],
      "metadata": {
        "id": "3TWCJe3AW3JW"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Removing irrelevant columns\n",
        "# #irrelevant_columns = ['Time since first consumer durables loan taken (in months)','Time since last Personal loan taken (in months)']\n",
        "# Loan_renamed.drop(['Time since first consumer durables loan taken (in months)','Time since last Personal loan taken (in months)'], axis = 1, inplace = True)\n",
        "# Loan_renamed.shape"
      ],
      "metadata": {
        "id": "QAKDxg3KXCRn"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Missing values treatment\n",
        "Loan_renamed.dropna(axis=0,how='any',subset=['Loan Amount','Gender'],inplace=True)"
      ],
      "metadata": {
        "id": "nreKQYLJXHmE"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#correlation matrix\n",
        "corrmat = Loan_renamed.corr()\n",
        "top_corr_features = corrmat.index\n",
        "plt.figure(figsize=(20,20))\n",
        "g=sns.heatmap(Loan_renamed[top_corr_features].corr(),annot=True,cmap=\"viridis\")"
      ],
      "metadata": {
        "id": "G5yWDMylbgNZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ratio of Male and female who took loan"
      ],
      "metadata": {
        "id": "CuxIjU8gdGLd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_renamed.Gender.value_counts().plot(kind = \"bar\", figsize = (10,4))\n",
        "plt.title(\"Ratio of male and female who took loan\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "2b6jXdIIc77Q",
        "outputId": "275a6c60-ec1d-41c4-eb1c-e6c32c32cfb3"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Ratio of male and female who took loan')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Getting the number of positive and negative examples.\n",
        "sns.countplot(Loan_renamed['Target variable'])\n",
        "plt.xticks((0, 1), [\"Non-Defaulter\", \"Defaulter\"])\n",
        "plt.xlabel(\"\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.title(\"Class counts\", y=1, fontdict={\"fontsize\": 20})"
      ],
      "metadata": {
        "id": "denm-z-JdR6p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_renamed['Target variable'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H_ExVPvfdays",
        "outputId": "816836fc-c360-47c1-de96-05818a3e1b5d"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Target variable\n",
              "0    83194\n",
              "1     1854\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The data set is pretty imbalanced as expected where positive examples defualters are significanltly less than 25%. We'll explain in the next section how to handle all of them after giving an overview of ensemble methods"
      ],
      "metadata": {
        "id": "mDOstiSgef64"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Loan amount\n",
        "\n",
        "For the three plots about LOAN AMOUNT, you could indicate why each is significant and what insights it gives that are different from the other or maybe what it adds on."
      ],
      "metadata": {
        "id": "aIvBYv5YehoP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set(style=\"whitegrid\")\n",
        "\n",
        "fig, ax=plt.subplots(nrows =1,ncols=3,figsize=(20,8))\n",
        "ax[0].set_title(\"Loan Amount (Distribution Plot)\")\n",
        "sns.distplot(Loan_renamed['Loan Amount'],ax=ax[0])\n",
        "ax[1].set_title(\"Loan Amount (Violin Plot)\")\n",
        "sns.violinplot(data =Loan_renamed, x='Tier',y='Loan Amount',ax=ax[1], inner=\"quartile\")\n",
        "ax[2].set_title(\"Loan Amount (Box Plot)\")\n",
        "sns.boxplot(data =Loan_renamed, x='Employment type',y='Loan Amount',ax=ax[2],orient='v')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "TMoZwE1JfY2T",
        "outputId": "6c1ebb65-465d-4ed0-c80d-02fa86451c5e"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Loan Amount (Box Plot)'}, xlabel='Employment type', ylabel='Loan Amount'>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x800 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Age- age at which the client took the loan"
      ],
      "metadata": {
        "id": "2AEBcthhh9aW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(17,5))\n",
        "\n",
        "#bar plot\n",
        "Loan_renamed['Customer age when loanwas taken'].plot(kind='hist',color='b',alpha=0.7, edgecolor='black')\n",
        "plt.xlabel(\"Age\", labelpad=14)\n",
        "plt.ylabel(\"Count of People\", labelpad=14)\n",
        "plt.title(\" Age of Customer when the loan was approved\")\n",
        "plt.legend(loc=\"best\",prop={\"size\":12})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "MoSGXmxLhz6_",
        "outputId": "a53f695e-b14f-4d8b-cd16-2cd4b83df418"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7ed34b2ee740>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x=Loan_renamed['Customer age when loanwas taken'],y='Loan Amount',data=Loan_renamed)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "qObZwL-ClMbP",
        "outputId": "52b58762-ca53-4b41-95f3-6f5ba26a6bc6"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Customer age when loanwas taken', ylabel='Loan Amount'>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x=Loan_renamed['Customer age when loanwas taken'],y='Target variable',data=Loan_renamed)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "RdacUaWglSxK",
        "outputId": "361a4ed6-0f21-41ab-9a5b-9a4f570df7b9"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Customer age when loanwas taken', ylabel='Target variable'>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# gender = pd.get_dummies(Loan_renamed['Gender'])\n",
        "# Loan_renamed=pd.concat([Loan_renamed,gender], axis=1)\n",
        "# Loan_renamed = Loan_renamed.drop('Gender', axis=1)"
      ],
      "metadata": {
        "id": "ewFtCY1piI9-"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dropped=['Time since first consumer durables loan taken (in months)','Time since last Personal loan taken (in months)',\n",
        "'Max amount sanctioned in the Live loans','Total sanctioned amount in the secured Loans which are Live',\n",
        "'Total sanctioned amount in the unsecured Loans which are Live','Maximum amount sanctioned for any Two wheeler loan']\n",
        "\n",
        "Loan_renamed.drop(dropped,axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "A5iqdX3UipH0"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. DATA CLEANING"
      ],
      "metadata": {
        "id": "J05hysD6iy9A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data=Loan_renamed.copy()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 148
        },
        "id": "T06tQop5i1kv",
        "outputId": "0cbda6da-c6b0-40ba-f3a7-d49fba1a1819"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'Loan_renamed' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-0ea74a687d8f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mLoan_renamed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'Loan_renamed' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "CatVariables = data.select_dtypes(include=['object'])\n",
        "NumVariables = data.select_dtypes(include=['float','int'])\n",
        "\n",
        "#standardizing column names for easier usage\n",
        "data.columns=data.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\n",
        "CatVariables=CatVariables.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\n",
        "NumVariables=NumVariables.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')"
      ],
      "metadata": {
        "id": "Et9o-h9yjBNM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Strategies to deal with missing value**.\n",
        "\n",
        "Almost always real world data sets have missing values. This can be due, for example, users didn't fill some part of the forms or some transformations happened while collecting and cleaning the data before they send it to you. Sometimes missing values are informative and weren't generated randomly. Therefore, it's a good practice to add binary features to check if there is missing values in each row for each feature that has missing values.\n",
        "\n",
        "In our case, a number of the variables have missing values consistently pointing to a lapse in the data generation process. Thus we will consider deleting these observations only after exploring the performance of the model with imputed values. Columns with a significant portion of the observations missing will be dropped as the model we have opted for does not take in missing values.\n",
        "\n",
        "Below are some of the most common strategies for dealing with missing values:\\n\",\n",
        "\n",
        "Simply delete all examples that have any missing values. This is usually done if the missing values are very small compared to the size of the data set and the missing values were random. In other words, the added binary features did not improve the model. One disadvantage for this strategy is that the model will throw an error when test data has missing values at prediction.\n",
        "\n",
        "Impute the missing values using the mean of each feature separately\n",
        "\n",
        "Impute the missing values using the median of each feature separately.\n",
        "\n",
        "Use Multivariate Imputation by Chained Equations (MICE). The main disadvantage of MICE is that we can't use it as a transformer in sklearn pipelines and it requires to use the full data set when imputing the missing values. This means that there will be a risk of data leakage since we're using both training and test sets to impute the missing values.\n",
        "\n",
        "**The following steps explain how MICE works:**\n",
        "\n",
        "First step: Impute the missing values using the mean of each feature separately.\n",
        "\n",
        "Second step: For each feature that has missing values, we take all other features as predictors (including the ones that had missing values) and try to predict the values for this feature using linear regression for example. The predicted values will replace the old values for that feature. We do this for all features that have missing values, i.e. each feature will be used once as a target variable to predict its values and the rest of the time as a predictor to predict other features' values. Therefore, one complete cycle (iteration) will be done once we run the model\n",
        " times to predict the\n",
        " features that have missing values. For our data set, each iteration will run the linear regression 6 times to predict the 6 features.\n",
        "\n",
        "Third step: Repeat step 2 until there is not much of change between predictions.\n",
        "\n",
        "Impute the missing values using K-Nearest Neighbors. We compute distance between all examples (excluding missing values) in the data set and take the average of k-nearest neighbors of each missing value. There's no implementation for it yet in sklearn and it's pretty inefficient to compute it since we'll have to go through all examples to calculate distances. Therefore, we'll skip this strategy in this notebook.\n",
        "To evaluate each strategy, we'll use Random Forest classifier with hyperparameters' values guided by Data-driven Advice for Applying Machine Learning to Bioinformatics Problems as a starting point.\n",
        "\n",
        "Let's first create binary features for missing values and then prepare the data for each strategy discussed above. Next, we'll compute the 10-folds cross validation AUC score for all the models using training data.\""
      ],
      "metadata": {
        "id": "XGlj9vxpj5M6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Imputing missing values**\n",
        "\n",
        "To do, investigate them first and document the case for imputation, we might need to drop them."
      ],
      "metadata": {
        "id": "hsV3fx8Ykt2R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#For quantitative data\n",
        "from sklearn.impute import SimpleImputer\n",
        "numerical_cols = data[NumVariables]\n",
        "categorical_cols = data[CatVariables]\n",
        "\n",
        "imp_mean = SimpleImputer(missing_values=np.nan, strategy='median')\n",
        "lat = imp_mean.fit_transform(numerical_cols)\n",
        "imp_mode = SimpleImputer(missing_values=np.nan,strategy='most_frequent')\n",
        "g_se = imp_mode.fit_transform(categorical_cols)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "id": "QSF4Sq5kjCK4",
        "outputId": "16056d71-c113-4b25-9761-d7ca2278c2b0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'data' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-245cba8b3bb3>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#For quantitative data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimpute\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSimpleImputer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mnumerical_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mNumVariables\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mcategorical_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mCatVariables\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[CatVariables]=g_se\n",
        "data[NumVariables]=lat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "vVeb2zydloh8",
        "outputId": "17eed8a1-17a6-4e5f-fdc5-f4584ae812bf"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'g_se' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-6786a0cfa258>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mCatVariables\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mg_se\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mNumVariables\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'g_se' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Encoding**\n",
        "\n",
        "**1.Label encoding**\n",
        "\n",
        "We can use LabelEncoder to encode our variable to numbers. What a label encoder essentially does is that it sees the first value in the column and converts it to 0, next value to 1 and so on.The integer values have a natural ordered relationship between each other and machine learning algorithms may be able to understand and harness this relationship. This approach works reasonably well with tree models\n",
        "\n",
        "**2.One hot encoding**\n",
        "\n",
        "For categorical variables where no such ordinal relationship exists, the integer/label encoding does not suffice. In fact, using this encoding and allowing the model to assume a natural ordering between categories may result in poor performance or unexpected results (predictions halfway between categories).\n",
        "\n",
        "In this case, a one-hot encoding can be applied to the integer representation. This is where the integer encoded variable is removed and a new binary variable is added for each unique integer value.\n",
        "\n",
        "So if we have n levels in a category, we will get n-1 features."
      ],
      "metadata": {
        "id": "OI2WQBX9l1TO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dealing with categorical columns\n",
        "# Label Encoding for object to numeric conversion\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "\n",
        "for feature in CatVariables:\n",
        "    data[feature] = le.fit_transform(data[feature].astype(str))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "UjOiynTkmJis",
        "outputId": "71fe67cb-0624-4bb2-9319-f43f7b40fa0b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'CatVariables' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-7ba38c5a3b5a>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLabelEncoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mfeature\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mCatVariables\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'CatVariables' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "CatVariables"
      ],
      "metadata": {
        "id": "MWLtFnWVmRZ5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**MODELLING**"
      ],
      "metadata": {
        "id": "diCuWeUtnNCO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X=data.drop(['customer_id','target_variable'],axis=1)\n",
        "y=data[[\"target_variable\"]]"
      ],
      "metadata": {
        "id": "bE4QFgPanOPt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# print((X.shape, y.shape))\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 10)\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "model = RandomForestClassifier(max_depth=4,min_samples_leaf=3, random_state = 10)\n",
        "model.fit(x_train, y_train)\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "yhat = model.predict(x_test)\n",
        "print(f'Your train accuracy is: {accuracy_score(y_test,yhat)}')\n",
        "\n",
        "pred_train = model.predict(x_train)\n",
        "print(f'Your prediction is: {accuracy_score(y_train,pred_train)}')"
      ],
      "metadata": {
        "id": "sjF6ZZqInaYA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "f1_score(y_test, yhat, average='weighted')"
      ],
      "metadata": {
        "id": "a3CRBOx_ncYY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Use the confusion matrix to visualize the precision and recall - and understand the effect of class imbalance in prediction\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import itertools\n",
        "\n",
        "def plot_confusion_matrix(cm, classes,\n",
        "                          normalize=False,\n",
        "                          title='Confusion matrix',\n",
        "                          cmap=plt.cm.Blues):\n",
        "    \"\"\"\n",
        "    This function prints and plots the confusion matrix.\n",
        "    Normalization can be applied by setting `normalize=True`.\n",
        "    \"\"\"\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        print(\"Normalized confusion matrix\")\n",
        "    else:\n",
        "        print('Confusion matrix, without normalization')\n",
        "\n",
        "    print(cm)\n",
        "\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "    tick_marks = np.arange(len(classes))\n",
        "    plt.xticks(tick_marks, classes, rotation=45)\n",
        "    plt.yticks(tick_marks, classes)\n",
        "\n",
        "    fmt = '.2f' if normalize else 'd'\n",
        "    thresh = cm.max() / 2.\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        plt.text(j, i, format(cm[i, j], fmt),\n",
        "                 horizontalalignment=\"center\",\n",
        "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')"
      ],
      "metadata": {
        "id": "ot6kgCfNnjpE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute confusion matrix\n",
        "cnf_matrix = confusion_matrix(y_test, yhat, labels=[1,0])\n",
        "np.set_printoptions(precision=2)\n",
        "\n",
        "print (classification_report(y_test, yhat))\n",
        "\n",
        "# Plot non-normalized confusion matrix\n",
        "plt.figure()\n",
        "plot_confusion_matrix(cnf_matrix, classes=['Defaulters(1)','Non-Defaulters(0)'],normalize= False,  title='Confusion matrix')"
      ],
      "metadata": {
        "id": "rIi6kfLgntHr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Clearly, the model has not leant enough examples of the default class, thus the predictions are for the non-defualters, and given their numbers, any complete prediction of the non-default class will give a misleading value of the perfomance metric.\n",
        "\n",
        "\n",
        "Yeah looks like we will consider class imbalance handling for better unbiased results : smote , upsampling : rose and all that would be necessary"
      ],
      "metadata": {
        "id": "l4LXcP9Pn_3H"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SMOTE**\n",
        "\n",
        "S𝒚𝒏𝒕𝒉𝒆𝒕𝒊𝒄 𝒎𝒊𝒏𝒐𝒓𝒊𝒕𝒚 𝒐𝒗𝒆𝒓𝒔𝒂𝒎𝒑𝒍𝒊𝒏𝒈 𝒕𝒆𝒄𝒉𝒏𝒊𝒒𝒖𝒆- creates examples of the minority class by looking at the distribution of the minority class and \"guesses\" what the other cases would have been\n",
        "\n",
        "1. Pick two points that are relatively closer to each other distance wise\n",
        "2. Draw a line\n",
        "3. Generate a new point along that line\n",
        "\n",
        "It doesn't always work but a lot of time it works and it is a good technique to look at when there is no way of generating more data and the aforementioned techniques are not applicable per se It is better for increasing precision(𝙥𝙤𝙨𝙞𝙩𝙞𝙫𝙚 𝙞𝙙𝙚𝙣𝙩𝙞𝙛𝙞𝙚𝙙 𝙖𝙨 𝒕𝒉𝒂𝒕 𝒂𝒓𝒆 𝒑𝒐𝒔𝒊𝒕𝒊𝒗𝒆 ) but this comes at the cost of recall (𝒐𝒖𝒕 𝒐𝒇 𝒂𝒍𝒍 𝒕𝒉𝒆 𝒑𝒐𝒔𝒊𝒕𝒊𝒗𝒆𝒔 𝒘𝒉𝒊𝒄𝒉 𝒐𝒏𝒆𝒔 𝒉𝒂𝒗𝒆 𝒃𝒆𝒆𝒏 𝒄𝒐𝒓𝒓𝒆𝒄𝒕𝒍𝒚 𝒊𝒅𝒆𝒏𝒕𝒊𝒇𝒊𝒆𝒅)"
      ],
      "metadata": {
        "id": "6JXE6HuVoOIp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install imblearn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Whf4JTPoEDL",
        "outputId": "6c41dfac-52b1-4960-8be9-607fd503d6f2"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting imblearn\n",
            "  Downloading imblearn-0.0-py2.py3-none-any.whl (1.9 kB)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (from imblearn) (0.10.1)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.11.4)\n",
            "Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn->imblearn) (3.5.0)\n",
            "Installing collected packages: imblearn\n",
            "Successfully installed imblearn-0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "from imblearn.over_sampling import SMOTE\n",
        "smote_sample=SMOTE(random_state=124,sampling_strategy='auto') # the sampling strategy can be one of float, str, dict or callable `float``,\n",
        "#it corresponds to the desired ratio of the number of samples in the minority class over the number of samples in the majority class after resampling ie {1:500}\n",
        "# ``'minority'``: resample only  minority class; 'not minority'``:all but the minority class; ``'not majority'``: all but the majority, ``'all'`` ,``'auto'``:\n",
        "x_res, y_res=smote_sample.fit_resample(X,y)\n",
        "\n",
        "\n",
        "# now plot the classes\n",
        "y_res.hist()"
      ],
      "metadata": {
        "id": "3fo2UCfto1LZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "With SMOTE we get a feature space with a similar distribution to the original data set, except that in this case we actually have a balanced ratio of the negative and positive examples. Thus our model should be able to learn the patterns associated with both defaults and non-defaults. Here we are interested in both an increase in precision and recall."
      ],
      "metadata": {
        "id": "G-kaQFb9pOPM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_res.shape,y_res.shape)"
      ],
      "metadata": {
        "id": "5JALsKnnpNeJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Re-Building the algorithm with the balanced data**"
      ],
      "metadata": {
        "id": "C0tB3e1Epf5r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "x_train, x_test, y_train, y_test = train_test_split(x_res,y_res, test_size = 0.3, random_state = 10)\n",
        "model = RandomForestClassifier(max_depth=4, random_state = 10)\n",
        "model.fit(x_train, y_train)\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "yhat = model.predict(x_test)\n",
        "print(f'Your test accuracy is: {accuracy_score(y_test,yhat)}')\n",
        "\n",
        "pred_train = model.predict(x_train)\n",
        "print(f'Your prediction is: {accuracy_score(y_train,pred_train)}')\n",
        "\n",
        "# If you choose class_weight = \"balanced\", the classes will be weighted inversely proportional to how frequently\n",
        "#  they appear in the data."
      ],
      "metadata": {
        "id": "wZkyAZzGpleD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute confusion matrix\n",
        "cnf_matrix = confusion_matrix(y_test, yhat, labels=[1,0])\n",
        "np.set_printoptions(precision=2)\n",
        "\n",
        "print (classification_report(y_test, yhat))\n",
        "\n",
        "# Plot non-normalized confusion matrix\n",
        "plt.figure()\n",
        "plot_confusion_matrix(cnf_matrix, classes=['Defaulters(1)','Non-Defaulters(0)'],normalize= False,  title='Confusion matrix')"
      ],
      "metadata": {
        "id": "43VBS32bpujm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using the balanced data we are able to see a more realistic results of the F1 score. As a bank we would be interested in a balanced value of precision and recall.\n",
        "\n",
        "We want to avail loans to the maximum customer base, thus we want to avoid a situaton where the model would flag an individual as a defaulter when it is the case that they are not. On the other hand we would also want to reduce LGD, Loss Given defautlt, by having a model with a higher recall value, in the sense, that when one applying for a facility is a defaulter, they need to be flagged as such."
      ],
      "metadata": {
        "id": "wrYe6Uib788w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "FEATURE IMPORTANCE\n",
        "\n",
        "This is optional and it is a compensating control to ensure the model is not overlearning on one feauture."
      ],
      "metadata": {
        "id": "HP75L2j18EHi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# from sklearn.preprocessing import  RobustScaler, FunctionTransformer\n",
        "# Build random forest classifier\n",
        "rf_clf = RandomForestClassifier(n_estimators=500,\n",
        "                                max_features=0.25,\n",
        "                                criterion=\"entropy\",\n",
        "                                class_weight=\"balanced\")\n",
        "\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "# fit RF to plot feature importances\n",
        "rf_clf.fit(RobustScaler().fit_transform(SimpleImputer(strategy=\"median\").fit_transform(x_train)), y_train)\n",
        "\n",
        "# Plot features importance\n",
        "importances = rf_clf.feature_importances_\n",
        "indices = np.argsort(rf_clf.feature_importances_)[::-1]\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.bar(range(1, 31), importances[indices], align=\"center\")\n",
        "plt.xticks(range(1, 31), data.columns[data.columns != \"target_variable\"][indices], rotation=90)\n",
        "plt.title(\"Feature Importance\", {\"fontsize\": 16});"
      ],
      "metadata": {
        "id": "-GtpK6i17_AW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Challenge:**\n",
        "\n",
        "1. Document the workings of random forest.\n",
        "2. Document the understanding and the maths behind feature importance.\n",
        "3. Do a stepwise deletion to identify model improvement based on the inclusion of important features only.\n",
        "4. Document the effect of multicolleaniarity in model performance.\n",
        "NB: The customer_id column should be removed as well. challenge to you\n",
        "\n",
        "Tuning (it is worth noting that feature engineering is of much importance than hyperparametere tuning as the perfomance improvement with the latter is always only marginal)"
      ],
      "metadata": {
        "id": "EL4RXEZ48ebO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**MODEL VALIDATON**\n",
        "\n",
        "Setting the background.\n",
        "\n",
        "1. Put in writing the model validation need."
      ],
      "metadata": {
        "id": "SoIlr1Eq9Z5S"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Generating credit scores**"
      ],
      "metadata": {
        "id": "Bem08ELW9oXo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_hat=model.predict(x_test)\n",
        "y_hat_2=(model.predict_proba(x_test)[:,1]>0.3).astype(int)\n",
        "## It is worth noting that one can vary the threshold for default given the lending facility's risk appetite.\n",
        "print(f1_score(y_test,y_hat),f1_score(y_test,y_hat_2))"
      ],
      "metadata": {
        "id": "hV6S9ybC70eJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, precision_score\n",
        "print(recall_score(y_test,y_hat),recall_score(y_test,y_hat_2))"
      ],
      "metadata": {
        "id": "-kUrlk599zAd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**The following forms our basis for rank ordering**\n",
        "\n",
        "0 - 200 Bad Customer ,\n",
        "\n",
        "201-350 2nd Worst,\n",
        "\n",
        "351 - 500 Not So bad,\n",
        "\n",
        "501 - 700 Ideal guys,\n",
        "\n",
        "700> Big loans"
      ],
      "metadata": {
        "id": "_44hAqvk94Bl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(model.predict_proba(x_test)[:,1]>0.5).astype(int)"
      ],
      "metadata": {
        "id": "FjqmzMYt-GoP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(1-model.predict_proba(x_test)[:,1])*1000"
      ],
      "metadata": {
        "id": "IX-fBoHe-Mqt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_test['score']=(1-model.predict_proba(x_test)[:,1])*1000\n",
        "x_test['risk']=y_hat"
      ],
      "metadata": {
        "id": "vts2wysS-QyF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.head(4)"
      ],
      "metadata": {
        "id": "yDSNBMb0-TiO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Export the model scores result to CSV to be able to perform rank ordering within Excel template provided\n",
        "x_test.to_csv('credit-risk-scores-vjc.csv')"
      ],
      "metadata": {
        "id": "VGWB3MxI-Xvt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "probs=model.predict_proba(x_train)"
      ],
      "metadata": {
        "id": "VJz9C9H2-Yru"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}